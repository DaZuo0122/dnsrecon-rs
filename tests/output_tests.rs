//! Unit tests for output functionality\n\nuse dnsrecon_rs::dns::record::{DnsRecord, RecordType, RecordData};\nuse dnsrecon_rs::output;\nuse std::net::Ipv4Addr;\n\n#[test]\nfn test_json_output() {\n    let record = DnsRecord::new_a(\n        \"example.com\".to_string(),\n        Ipv4Addr::new(192, 168, 1, 1)\n    );\n    \n    let records = vec![record];\n    let json_string = output::json::to_json_string(&records);\n    \n    assert!(json_string.is_ok());\n    let json = json_string.unwrap();\n    assert!(json.contains(\"\\\"type\\\":\\\"A\\\"\"));\n    assert!(json.contains(\"\\\"name\\\":\\\"example.com\\\"\"));\n    assert!(json.contains(\"\\\"address\\\":\\\"192.168.1.1\\\"\"));\n}\n\n#[test]\nfn test_xml_output() {\n    let record = DnsRecord::new_a(\n        \"example.com\".to_string(),\n        Ipv4Addr::new(192, 168, 1, 1)\n    );\n    \n    let records = vec![record];\n    let xml_string = output::xml::to_xml_string(&records);\n    \n    assert!(xml_string.is_ok());\n    let xml = xml_string.unwrap();\n    assert!(xml.contains(\"<a>\"));\n    assert!(xml.contains(\"<name>example.com</name>\"));\n    assert!(xml.contains(\"<address>192.168.1.1</address>\"));\n}